import React, { useState, useEffect } from "react"

interface Proposal {
    id: string
    title: string
    description: string
    status: "open" | "passed" | "rejected" | "executed"
    createdAt: string
    completedAt?: string
    daoName: string
    daoAddress: string
}

const DAO_ADDRESSES = {
    coreTeam: {
        address:
            "osmo18pl3nq7r5xht260jsm245j3c8xjhu2nd7ucasllfj4waqehrw3zsll9zgq",
        name: "PageDAO Core Team SubDAO",
    },
    contentPublishing: {
        address:
            "osmo1aseat02djeyw03ky24f6w7lakcft7exf8xxf3qrhg8ryvp7rgkpqu2e6ql",
        name: "PageDAO C&P SubDAO",
    },
    pageverse: {
        address:
            "osmo1ewxse6nll8w9qhfp3slm57agq806tpwy43gkpa0jkd8njsujxghsp6htsn",
        name: "PageDAO PageVerse SubDAO",
    },
    researchDev: {
        address:
            "osmo1m6arp8k5dshsankha7tat4fyhppz4g8jtmqmflggazx3wfpvtzusgxkcdw",
        name: "PageDAO R&D SubDAO",
    },
    tokenSource: {
        address:
            "osmo1ts5plptvwfqej9r99jd7rzv5wfpry5c7hw8hv0d8pwunyxslgv54q6pnt46",
        name: "PageDAO Page Token Source 1 SubDAO",
    },
    op1344: {
        address:
            "osmo15ma5het3fqr7a45wqvgq0mfmdc2dgy8enepz8s7r0856f8xxtwyq2r5c3e",
        name: "OP1344",
    },
}

const CHAIN_ID = "osmosis-1"
const BASE_URL = "https://indexer.daodao.zone"

const formatDate = (dateString: string): string => {
    try {
        return new Date(dateString).toLocaleDateString("en-US", {
            year: "numeric",
            month: "short",
            day: "numeric",
            hour: "2-digit",
            minute: "2-digit",
        })
    } catch (e) {
        return "Invalid date"
    }
}

function ProposalCard({
    proposal,
    isExpanded,
    onToggle,
}: {
    proposal: Proposal
    isExpanded: boolean
    onToggle: () => void
}) {
    return (
        <div
            data-proposal-id={proposal.id}
            style={{
                marginBottom: "16px",
                backgroundColor: "#ffffff",
                borderRadius: "12px",
                border: "1px solid #e5e7eb",
                transition: "all 0.2s ease",
                cursor: "pointer",
                boxShadow: isExpanded ? "0 4px 6px rgba(0, 0, 0, 0.1)" : "none",
            }}
            onClick={onToggle}
        >
            <div style={{ padding: "16px" }}>
                <div
                    style={{
                        fontSize: "14px",
                        color: "#6b7280",
                        marginBottom: "4px",
                    }}
                >
                    <a
                        href={`https://daodao.zone/dao/${proposal.daoAddress}/proposals`}
                        target="_blank"
                        rel="noopener noreferrer"
                        onClick={(e) => e.stopPropagation()}
                        style={{
                            color: "#4b5563",
                            textDecoration: "underline",
                            cursor: "pointer",
                        }}
                    >
                        {proposal.daoName}
                    </a>
                </div>
                <div
                    style={{
                        fontSize: "16px",
                        fontWeight: "600",
                        color: "#111827",
                    }}
                >
                    <span>#{proposal.id}</span> {proposal.title}
                </div>

                <div
                    style={{
                        padding: "4px 8px",
                        borderRadius: "20px",
                        fontSize: "13px",
                        display: "inline-block",
                        backgroundColor:
                            proposal.status === "passed"
                                ? "#dcfce7"
                                : "#fff7ed",
                        color:
                            proposal.status === "passed"
                                ? "#166534"
                                : "#9a3412",
                        marginTop: "8px",
                    }}
                >
                    {proposal.status.charAt(0).toUpperCase() +
                        proposal.status.slice(1)}
                </div>
            </div>

            {isExpanded && (
                <div
                    style={{
                        padding: "16px",
                        backgroundColor: "#f9fafb",
                        borderBottomLeftRadius: "12px",
                        borderBottomRightRadius: "12px",
                    }}
                >
                    <div
                        style={{
                            fontSize: "15px",
                            lineHeight: "1.6",
                            color: "#374151",
                            marginBottom: "16px",
                            whiteSpace: "pre-wrap",
                        }}
                    >
                        {proposal.description}
                    </div>

                    <div
                        style={{
                            display: "flex",
                            justifyContent: "space-between",
                            fontSize: "13px",
                            color: "#6b7280",
                            borderTop: "1px solid #e5e7eb",
                            paddingTop: "12px",
                            marginTop: "12px",
                        }}
                    >
                        <div>
                            <span style={{ fontWeight: "500" }}>Created:</span>{" "}
                            {formatDate(proposal.createdAt)}
                        </div>
                        {proposal.completedAt && (
                            <div>
                                <span style={{ fontWeight: "500" }}>
                                    Completed:
                                </span>{" "}
                                {formatDate(proposal.completedAt)}
                            </div>
                        )}
                    </div>
                </div>
            )}
        </div>
    )
}

export default function MultisigProposalsWidget() {
    const [proposals, setProposals] = useState<Proposal[]>([])
    const [expandedIds, setExpandedIds] = useState<Set<string>>(new Set())
    const [loading, setLoading] = useState<boolean>(true)
    const [error, setError] = useState<string | null>(null)

    useEffect(() => {
        const fetchProposals = async () => {
            try {
                const allProposals: Proposal[] = []

                for (const [key, dao] of Object.entries(DAO_ADDRESSES)) {
                    const proposalsUrl = `${BASE_URL}/${CHAIN_ID}/contract/${dao.address}/daoCore/allProposals`
                    console.log(`Fetching from ${dao.name}:`, proposalsUrl)

                    const proposalsRes = await fetch(proposalsUrl)
                    if (!proposalsRes.ok) {
                        console.log(
                            `Failed to fetch from ${dao.name}:`,
                            proposalsRes.status
                        )
                        continue
                    }

                    const proposalsData = await proposalsRes.json()
                    if (Array.isArray(proposalsData)) {
                        const processedProposals = proposalsData.map((p) => ({
                            id: p.id,
                            title: p.proposal?.title || "Untitled Proposal",
                            description:
                                p.proposal?.description ||
                                "No description provided",
                            status: (p.proposal?.status ||
                                "unknown") as Proposal["status"],
                            createdAt: p.createdAt,
                            completedAt: p.completedAt,
                            daoName: dao.name,
                            daoAddress: dao.address,
                        }))
                        allProposals.push(...processedProposals)
                    }
                }

                setProposals(
                    allProposals.sort(
                        (a, b) =>
                            new Date(b.createdAt).getTime() -
                            new Date(a.createdAt).getTime()
                    )
                )
            } catch (err) {
                setError(err instanceof Error ? err.message : String(err))
            } finally {
                setLoading(false)
            }
        }

        fetchProposals()
        const interval = setInterval(fetchProposals, 30000)
        return () => clearInterval(interval)
    }, [])

    const toggleProposal = (id: string) => {
        setExpandedIds((prev) => {
            const newSet = new Set(prev)
            if (newSet.has(id)) {
                newSet.delete(id)
            } else {
                newSet.add(id)
            }
            return newSet
        })
    }

    if (loading) return <div>Loading proposals...</div>

    return (
        <div key="framer-proposals-root" data-framer-component-type="proposals">
            <h2
                style={{
                    fontSize: "24px",
                    fontWeight: "bold",
                    marginBottom: "24px",
                    textAlign: "center",
                    color: "#111827",
                }}
            >
                Ecosystem DAO Proposals ({proposals.length})
            </h2>

            <div
                style={{
                    maxHeight: "800px",
                    overflowY: "auto",
                    padding: "4px",
                }}
            >
                {proposals.map((proposal) => (
                    <ProposalCard
                        key={`proposal-${proposal.daoAddress}-${proposal.id}-${proposal.createdAt}`}
                        proposal={proposal}
                        isExpanded={expandedIds.has(proposal.id)}
                        onToggle={() => toggleProposal(proposal.id)}
                    />
                ))}
            </div>

            {error && (
                <div
                    style={{
                        marginTop: "20px",
                        padding: "12px",
                        backgroundColor: "#fee2e2",
                        borderRadius: "8px",
                        color: "#991b1b",
                        textAlign: "center",
                    }}
                >
                    {error}
                </div>
            )}
        </div>
    )
}
